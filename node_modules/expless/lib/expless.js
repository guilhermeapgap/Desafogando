var less= require('less');
var usa	= require('useragent');
var _	= require('underscore');
var fs	= require('fs');
var Url = require('url');
var path= require('path');
var log = function(debug, key, val, type) {
		if(debug || type === 'error') {
			switch(type) {
				case 'log':
				case 'info':
				case 'error':
				case 'warn':
					break;
				default:
					type = 'log';
			}
		console[type](' \033[90m%s :\033[0m \033[36m%s\033[0m', key, val);
		}
	},
	addInfo = function( query, header, more ){
		var x = new Array('// UserAgent');
		var uas  = usa.parse( header, query).toJSON();
		_.extend( uas, usa.is( header ) );

		for ( z in uas ){
			var w = '@ua-' + z ;
			if( _.isNumber( uas[ z ] ) || _.isBoolean( uas[ z ] ) )
				x.push( w + ' :' +  uas[ z ] + ' ; ');
			if( _.isString( uas[ z ] ) )
				x.push(  w + ': "' + uas[ z ] + '" ; ');
			if( _.isObject( uas[ z ] ) )
				for ( y in uas[z] ){
					if( _.isNumber( uas[ z ][ y ] ) || _.isBoolean( uas[ z ][ y ] ) )
						x.push( w + '-'+ y  +' :' +  uas[ z ][ y ] + ' ; ');
					if( _.isString( uas[ z ][ y ] ) )
						x.push( w + '-'+ y  +' :"' +  uas[ z ][ y ] + '" ; ');
				}
		}
		if( _.isObject( more ) ){
			x.push('// Info ' );
			for ( z in more) {
				var w = '@' + z ;
				if( _.isObject(more[ z ] ) ){
					_.each(more[z], function(num, key){ 
						if( _.isNumber( more[ z ][ key ] ) || _.isBoolean( more[ z ][ key ] ) )
							x.push( w + ' :' +  more[ z ][ key ] + ' ; ');
						if( _.isString( more[ z ][ key ] ) )
							x.push(  w + ': "' + more[ z ][ key ] + '" ; ');
						if( _.isObject( more[ z ][ key ] ) )
							for ( y in more[ z ][ key ] ) {
								if( _.isNumber( more[ z ][ key ][ y ] ) || _.isBoolean( more[ z ][ key ][ y ] ) )
									x.push( w + '-'+ y  +' :' +  more[ z ][ key ][ y ] + ' ; ');
								if( _.isString( more[ z ][ key ][ y ] ) )
									x.push( w + '-'+ y  +' :"' +  more[ z ][ key ][ y ] + '" ; ');
							}
					});
				} else {
					if( _.isNumber( more[ z ] ) || _.isBoolean( more[ z ] ) )
						x.push( w + ' :' +  more[ z ] + ' ; ');
					if( _.isString( more[ z ] ) )
						x.push(  w + ': "' + more[ z ] + '" ; ');
					if( _.isObject( more[ z ] ) )
						for ( y in more[z] ){
							if( _.isNumber( more[ z ][ y ] ) || _.isBoolean( more[ z ][ y ] ) )
								x.push( w + '-'+ y  +' :' +  more[ z ][ y ] + ' ; ');
							if( _.isString( more[ z ][ y ] ) )
								x.push( w + '-'+ y  +' :"' +  more[ z ][ y ] + '" ; ');
						}
				}
			}
		}
		x.push('');
		return x.join('\n');
	};
	//Render
module.exports = exports = function(_super){
		var x = [];
		var self = this;
		self._super = new Object({});
		self._super['prefix'] = _.isString( _super.prefix ) ? _super.prefix : '/css';
		self._super['compress'] = _.isBoolean(_super.compress ) ? _super.compress : false;
		self._super['debug'] = _.isBoolean(_super.debug ) ? _super.debug : false;
		self._super['query'] = _.isString( _super.query ) ? _super.query : 'ua';
		self._super['encoding'] = _.isString(_super.encoding ) ? _super.encoding : 'UTF-8';
		self._super['css'] = new RegExp("\.css$");
		self._super['min'] = new RegExp("(\.|-)min\.css$");
		self._super['scr'] = _super.scr;
		self._super['more'] = _.isString( _super.fiel ) ? _super.fiel : false;

		fs.exists( _super.scr, function ( exist ) {
			if( !exist )
				log( self._super['debug'], 'LESS : No existe, path  ', _super.scr, "error" );
			if( _.isArray( _super.paths )  ){
				_.each( _super.paths, function( xs ) {
					fs.exists( xs, function (exists) {
						if( !exists )
							log( self._super['debug'],  'LESS : No existe, path  ', xs, "error" );
						x.push( xs );
					});
				})
			}
			if( _.isString( _super.paths )  ){ 
				fs.exists( _super.paths, function (exists) { 
					if( !exists )
						log( self._super[ 'debug'],  'LESS : No existe, path ', _super.paths, "error" );
					x.push( _super.paths );
				});
			}
		});
		self._super['less'] = { paths : x };
		// Render
		return function ( req, res, next ){
			var UrlParse = Url.parse( req.url ).pathname;
			if( self._super['css'].test( UrlParse ) || self._super['min'].test( UrlParse ) ) {
				var error = function(err) {
					return next('ENOENT' == err.code ? null : err);
				};
				if ( self._super["prefix"] && 0 === UrlParse.indexOf( self._super["prefix"] ) ) {
					UrlParse = UrlParse.substring( self._super["prefix"].length );
				}

				var fileUrl = path.join( self._super['scr'], self._super['min'].test(UrlParse) ? UrlParse.replace(self._super['min'], '.less') : UrlParse.replace('.css', '.less') );
				var query	= _.isEmpty( UrlParse.query ) ? null : UrlParse.query[ self._super["query"] ];
				var More	= addInfo( query, req.headers['user-agent'], self._super['more'] ? req[ self._super['more'] ] : null );
				var compress= self._super['compress'] ? self._super['compress'] : self._super['min'].test( UrlParse );

				log(self._super['debug'], 'source', fileUrl);
				log(self._super['debug'], 'dest', UrlParse);

				fs.readFile( fileUrl, self._super['encoding'], function(err, data){
					log(self._super['debug'], 'read', fileUrl);
					if( !err && data ) {
						self.less = new ( less.Parser )( self._super['less'] );
						self.less.parse( More + data, function(err, tree){
							log(self._super['debug'], 'render', fileUrl);
							if ( err ) {
								log(self._super['debug'], "LESS " + err.type + ' error', err.message, 'error');
								log(self._super['debug'], "LESS File", err.filename + ' ' + err.line + ':' + err.column, 'error');
								return next(err);
							}
							res.contentType('text/css');
							res.send( tree.toCSS({ compress: compress } ) );
						} );
					} else {
						log(self._super['debug'], 'LESS File', fileUrl, "error");
						error( err );
					}
				});
			} else { next(); }
		};
	};